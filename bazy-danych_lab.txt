### lab 04 ###

#Zad1
a) - DELETE FROM postac WHERE id_postaci=5
   - DELETE FROM postac WHERE id_postaci=6
b) - ALTER TABLE postac DROP PRIMARY KEY;
   - ALTER TABLE postac MODIFY id_postaci int;
   - ALTER TABLE postac DROP PRIMARY KEY;
   - ALTER TABLE walizka DROP FOREIGN KEY walizka_ibfk_1;
   - ALTER TABLE przetwory DROP FOREIGN KEY przetwory_ibfk_1;
   - ALTER TABLE przetwory DROP FOREIGN KEY przetwory_ibfk_2;
   - ALTER TABLE izba DROP FOREIGN KEY izba_ibfk_1;
   - ALTER TABLE postac DROP PRIMARY KEY;

#Zad2
a) - ALTER TABLE postac ADD pesel varchar(11) first;
   - UPDATE postac SET pesel='46353728179'+id_postaci;
   - ALTER TABLE ADD PRIMARY KEY(pesel);
b) - ALTER TABLE postac MODIFY rodzaj enum('wiking','ptak','kobieta','syrena');
c) - INSERT INTO postac(pesel, id_postaci, nazwa, rodzaj, data_ur, wiek) VALUES('45638725694', '5', '1630-12-10', 200);

#Zad3
a) - UPDATE postac SET statek='Statek_Bjorna' WHERE nazwa LIKE '%a%';
b) - UPDATE statek SET max_ladownosc=max_ladownosc*0.7 WHERE data_wodowania>'1900-12-31' AND data_wodowania<'2001-01-01';
c) ???

#Zad4
a) - ALTER TABLE postac MODIFY rodzaj enum('wiking','ptak','kobieta','syrena','waz');
   - INSERT INTO postac(pesel, id_postaci, nazwa, rodzaj, data_ur, wiek, statek) VALUES('30900864532', '8', 'Loko', 'waz', 'NULL', 'NULL', 'NULL');
b) - CREATE TABLE marynarz LIKE postac; 
c) - INSERT INTO marynarz SELECT * FROM postac WHERE statek IS NOT NULL;

#Zad5
a) - UPDATE postac SET statek=NULL;
b) - DELETE FROM postac WHERE id_postaci=7;
c) - DELETE FROM statek WHERE nazwa_statku=Statek_Bjorna;
   - DELETE FROM statek WHERE nazwa_statku=2;
d) - ALTER TABLE statek DROP FOREIGN KEY statek_ibfk_1;
   - DROP TABLE statek;
e) - CREATE TABLE zwierz (id int auto_increment primary key, nazwa varchar(50), wiek int unsigned);
f) - INSERT INTO zwierz(nazwa, wiek) SELECT nazwa, wiek FROM postac WHERE rodzaj='ptak' AND rodzaj='waz';




### lab 05 ###

#Zad1 
a) - CREATE TABLE kreatura SELECT * FROM wikingowie.kreatura;
   - CREATE TABLE zasob SELECT * FROM wikingowie.zasob;
   - CREATE TABLE ekwipunek SELECT * FROM wikingowie.ekwipunek;
b) - SELECT * FROM zasob;
c) - SELECT * FROM zasob WHERE rodzaj='jedzenie';
d) - SELECT * FROM zasob WHERE ilosc='1, 3, 5';

#Zad2
a) - SELECT nazwa FROM kreatura WHERE rodzaj <> 'wiedzma' AND udzwig >= 50;
b) - SELECT nazwa FROM zasob WHERE waga BETWEEN 2 AND 5;
c) - SELECT nazwa FROM kreatura WHERE nazwa LIKE '%or%' AND udzwig BETWEEN 30 AND 70;

#Zad3
a) - SELECT nazwa FROM zasob WHERE MONTH(dataPozyskania)=7 OR MONTH(dataPozyskania)=8;
b) - SELECT nazwa, waga FROM zasob WHERE rodzaj IS NOT NULL ORDER BY waga;
c) - SELECT nazwa, dataUr FROM kreatura ORDER BY dataUr DESC LIMIT 5;

#Zad4 
a) - SELECT DISTINCT rodzaj FROM kreatura;
b) - SELECT CONCAT(nazwa, ' - ', rodzaj) FROM kreatura WHERE rodzaj LIKE 'wi%';
c) - SELECT nazwa, waga*ilosc FROM zasob WHERE YEAR(dataPozyskania) BETWEEN 2000 AND 2007;
   - SELECT nazwa, waga*ilosc FROM zasob WHERE dataPozyskania BETWEEN '2000-01-01' AND '2007-12-31';

#Zad5 
a) - SELECT CONCAT(nazwa,' ',waga*ilosc*0.7,' odpad to ',waga*ilosc*0.3) FROM zasob WHERE rodzaj='jedzenie';
b) - SELECT * FROM zasob WHERE rodzaj IS NULL;
c) - SELECT DISTINCT nazwa,rodzaj FROM zasob WHERE nazwa LIKE 'Ba%' OR nazwa LIKE '%os' ORDER BY nazwa;

### lab 06 ###

#Zad1
1) - SELECT AVG(waga) FROM kreatura WHERE rodzaj='wiking';
2) - SELECT rodzaj, COUNT(*), ANG(waga) FROM kreatura GROUP BY rodzaj;
3) - SELECT AVG(2020-year(dataUr)) AS wiek FROM kreatura GROUP BY rodzaj;

#Zad2
1) - SELECT SUM(udzwig), rodzaj FROM kreatura GROUP BY rodzaj;
2) - SELECT nazwa, AVGS(waga) FROM zasob WHERE ilosc >=4 GROUP BY nazwa HAVING SUM(waga)>10;
3) - SELECT rodzaj, COUNT(*) FROM zasob GROUP BY rodzaj;
   - SELECT rodzaj, COUNT(DISTINCT(nazwa)) FROM zasob GROUP BY rodzaj;
   - SELECT rodzaj, COUNT(DISTINCT(nazwa)) AS liczba FROM zasob GROUP BY rodzaj HAVING liczba>1;

#Zad3
1) - SELECT nazwa, idZasobu, ilosc FROM kreatura k, ekwipunek e WHERE k.idKreatury=e.idKreatury;
2) - SELECT * FROM kreatura k, ekwipunek e, zasob z WHERE k.idKreatury=e.idKreatury AND k.idKreatury=z.idZasobu;
   - SELECT k.nazwa, z.nazwa FROM kreatura k, ekwipunek e, zasob z WHERE k.idKreatury=e.idKreatury AND k.idKreatury=z.idZasobu;
3) - SELECT k.idKreatury, k.nazwa FROM kreatura k WHERE k.idKreatury NOT IN(SELECT idKreatury FROM ekwipunek WHERE idKreatury IS NOT NULL);

#Zad4
a) - SELECT * FROM zasob z, kreatura NATURAL JOIN ekwipunek WHERE kreatura.rodzaj='wiking' AND YEAR(kreatura.dataUr) BETWEEN 1670 AND 1679 AND z.idZasobu=ekwipunek.idZasobu;
   - SELECT * FROM zasob z, kreatura NATURAL JOIN ekwipunek WHERE kreatura.rodzaj='wiking' AND YEAR(kreatura.dataUr) BETWEEN 1670 AND 1679 AND z.idZasobu=ekwipunek.idZasobu AND
      kreatura.idKreatury=ekwipunek.idKreatury;
   - SELECT k.nazwa, z.nazwa FROM kreatura k, zasob z NATURAL JOIN ekwipunek WHERE YEAR (k.dataUr) LIKE '167%' AND k.rodzaj='wiking';
b) - SELECT k.nazwa FROM kreatura k LEFT JOIN ekwipunek e ON k.idKreatury=e.idKreatury INNEJ JOIN zasob z ON e.idZasobu=z.idZasobu WHERE z.rodzaj='jedzenie' ORDER BY dataUr 
      DESC LIMIT 5;
c)  


#Zad5
1) - SELECT k.rodzaj,AVG(z.waga) FROM kreatura k,ekwipunek e, zasob z WHERE k.idKreatury=e.idKreatury AND e.idZasobu=z.idZasobu AND k.rodzaj!='malpa' AND k.rodzaj!='waz'GROUP BY 
     k.rodzaj HAVING SUM(e.ilosc)<30
   - SELECT k.rodzaj, AVG(e.ilosc *z.waga) FROM kreatura AS k, ekwipunek AS e, zasob AS z WHERE k.idKreatury=e.idKreatury AND e.idZasobu=z.idZasobu AND k.rodzaj NOT IN('malpa','waz')
     GROUP BY rodzaj HAVING SUM(e.ilosc) < 30
2) - SELECT DISTINCT k.rodzaj, (SELECT CONCAT(k2.nazwa, " - " , k2.dataUr) FROM kreatura k2 WHERE k.rodzaj=k2.rodzaj ORDER BY k2.dataUr LIMIT 1) AS najstarsze, (SELECT CONCAT(k2.nazwa, " - " , k2.dataUr) 
     FROM kreatura k2 WHERE k.rodzaj=k2.rodzaj ORDER BY k2.dataUr DESC LIMIT 1) AS najmlodsze FROM kreatura k;

### lab 07 ###

#Zad1
a) - CREATE TABLE uczestnicy SELECT * FROM wikingowie.uczestnicy;
   - CREATE TABLE etapy_wyprawy SELECT * FROM wikingowie.etapy_wyprawy;
   - CREATE TABLE sektor SELECT * FROM wikingowie.sektor
   - CREATE TABLE wyprawa SELECT * FROM wikingowie.wyprawa;
b)
c) - SELECT w.nazwa, SUM(e.ilosc) FROM wyprawa w, ekwipunek e, kreatura k, uczestnicy u, zasob z WHERE e.idKreatury=k.idKreatury AND u.id_wyprawy=w.id_wyprawy AND u.id_uczestnika=k.idKreatury 
     AND e.idZasobu=z.idZasobu GROUP BY w.nazwa;

#Zad2
a) - SELECT w.nazwa, COUNT(u.id_uczestnika),GROUP_CONCAT(k.nazwa) FROM wyprawa w, kreatura k, uczestnicy u WHERE u.id_wyprawy=w.id_wyprawy AND u.id_uczestnika=k.idKreatury GROUP BY w.nazwa;
b) - SELECT e.idEtapu, s.nazwa AS "nazwa sektora", k.nazwa AS "nazwa kierownika" FROM etapy_wyprawy e, sektor s, wyprawa w,kreatura k WHERE w.kierownik=k.idKreatury AND w.id_wyprawy=e.idWyprawy AND
     e.sektor=s.id_sektora ORDER BY w.data_rozpoczecia, e.kolejnosc;

#Zad3
a) - SELECT s.nazwa AS "nazwa sektora", COUNT(e.sektor + IFNULL(e.sektor,0)) AS "ilosc odwiedzin" FROM sektor s, etapy_wyprawy e WHERE e.sektor=s.id_sektora GROUP BY s.nazwa;
b) - SELECT DISTINCT k.nazwa, IF(u.id_uczestnika IS NULL, 'nie brał udziału w wyprawie', 'brał udział w wyprawie')
     FROM kreatura k LEFT JOIN uczestnicy u ON u.id_uczestnika=idKreatury;

#Zad4
a) - SELECT w.nazwa, SUM(LENGTH(e.dziennik)) AS liczba FROM wyprawa w, etapy_wyprawy e WHERE w.id_wyprawy=e.idWyprawy GROUP BY w.nazwa HAVING liczba < 400;
b) - SELECT w.nazwa AS "wyprawa", SUM(z.waga*e.ilosc)/COUNT(u.id_uczestnika) FROM kreatura k, zasob z, wyprawa w, uczestnicy u, ekwipunek e WHERE z.idZasobu=e.idZasobu AND k.idKreatury=e.idKreatury AND 
     u.id_uczestnika=k.idKreatury AND u.id_wyprawy=w.id_wyprawy GROUP BY w.nazwa;

#Zad5
a) - SELECT k.nazwa, w.nazwa, ABS(DATEDIFF(k.dataUr, data_rozpoczecia)) AS ile_dni FROM kreatura k, wyprawa w, uczestnicy u, sektor s, etapy_wyprawy e WHERE u.id_uczestnika=k.idKreatury 
     AND w.id_wyprawy=u.id_wyprawy AND e.idWyprawy=w.id_Wyprawy AND e.sektor=id_sektora AND s.nazwa = "Chatka dziadka';

### lab 08 ###

#Zad1 
a) - DELIMITER //
     CREATE TRIGGER kreatura_before_insert
     BEFORE INSERT ON kreatura
     FOR EACH ROW
     BEGIN
     IF NEW.waga <= 0
     THEN
     SET NEW.waga = 0;
     END IF;
     END
     //
     DELIMITER ;

#Zad2
a) - DELIMITER //
     CREATE TRIGGER wyprawa_after_delete
     AFTER DELETE ON wyprawa
     FOR EACH ROW
     BEGIN
     DECLARE kierownik_nazwa VARCHAR(100);
     SET kierownik_nazwa = (SELECT kreatura.nazwa FROM kreatura WHERE idKreatury = OLD.kierownik);
     INSERT INTO archiwum_wypraw VALUES (OLD.id_wyprawy, OLD.nazwa, OLD.data_rozpoczecia, OLD.data_zakonczenia, kierownik_nazwa);
     END
     //
     DELIMITER ;

#Zad3
a) - DELIMITER //
     CREATE PROCEDURE eliksir_sily(IN id int)
     BEGIN
     UPDATE kreatura SET udzwig = udzwig * 1.2 where id=idKreatury;
     END
     //
     DELIMITER ;

b) - DELIMITER //
     CREATE FUNCTION wielkie_litery(text varchar(255))
     RETURNS VARCHAR(255)
     BEGIN
     DECLARE ucase VARCHAR(255);
     SET @ucase = UCASE(text);
     RETURN @ucase;
     END
     //
     DELIMITER ;

#Zad4
a)
b)

#Zad5
a)
b)




















